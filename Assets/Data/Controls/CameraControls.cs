//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Data/Controls/CameraControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @CameraControls : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @CameraControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""CameraControls"",
    ""maps"": [
        {
            ""name"": ""OrbitControls"",
            ""id"": ""e3f35d8c-2d94-493b-a37a-1eee1c574737"",
            ""actions"": [
                {
                    ""name"": ""MouseDelta"",
                    ""type"": ""PassThrough"",
                    ""id"": ""1c05922d-0edd-4a72-bd15-075537aab6e1"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Enable Movement"",
                    ""type"": ""Button"",
                    ""id"": ""06273881-33e3-415a-b720-5b97f9f2c56f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press(behavior=2)"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ToggleOrbitMode"",
                    ""type"": ""Button"",
                    ""id"": ""6a62d0a6-c995-4572-a814-58fafe8a4ca7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""7823f356-e30e-472a-a877-89e3d989ace7"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MouseDelta"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8bad4192-700f-470b-a039-abd6ca5746c9"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Enable Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""25015ec5-d636-4787-95bf-6df896aefa0c"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Enable Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f41b3091-be97-4f5b-a694-e9aabd5dd65d"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ToggleOrbitMode"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // OrbitControls
        m_OrbitControls = asset.FindActionMap("OrbitControls", throwIfNotFound: true);
        m_OrbitControls_MouseDelta = m_OrbitControls.FindAction("MouseDelta", throwIfNotFound: true);
        m_OrbitControls_EnableMovement = m_OrbitControls.FindAction("Enable Movement", throwIfNotFound: true);
        m_OrbitControls_ToggleOrbitMode = m_OrbitControls.FindAction("ToggleOrbitMode", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // OrbitControls
    private readonly InputActionMap m_OrbitControls;
    private IOrbitControlsActions m_OrbitControlsActionsCallbackInterface;
    private readonly InputAction m_OrbitControls_MouseDelta;
    private readonly InputAction m_OrbitControls_EnableMovement;
    private readonly InputAction m_OrbitControls_ToggleOrbitMode;
    public struct OrbitControlsActions
    {
        private @CameraControls m_Wrapper;
        public OrbitControlsActions(@CameraControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @MouseDelta => m_Wrapper.m_OrbitControls_MouseDelta;
        public InputAction @EnableMovement => m_Wrapper.m_OrbitControls_EnableMovement;
        public InputAction @ToggleOrbitMode => m_Wrapper.m_OrbitControls_ToggleOrbitMode;
        public InputActionMap Get() { return m_Wrapper.m_OrbitControls; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(OrbitControlsActions set) { return set.Get(); }
        public void SetCallbacks(IOrbitControlsActions instance)
        {
            if (m_Wrapper.m_OrbitControlsActionsCallbackInterface != null)
            {
                @MouseDelta.started -= m_Wrapper.m_OrbitControlsActionsCallbackInterface.OnMouseDelta;
                @MouseDelta.performed -= m_Wrapper.m_OrbitControlsActionsCallbackInterface.OnMouseDelta;
                @MouseDelta.canceled -= m_Wrapper.m_OrbitControlsActionsCallbackInterface.OnMouseDelta;
                @EnableMovement.started -= m_Wrapper.m_OrbitControlsActionsCallbackInterface.OnEnableMovement;
                @EnableMovement.performed -= m_Wrapper.m_OrbitControlsActionsCallbackInterface.OnEnableMovement;
                @EnableMovement.canceled -= m_Wrapper.m_OrbitControlsActionsCallbackInterface.OnEnableMovement;
                @ToggleOrbitMode.started -= m_Wrapper.m_OrbitControlsActionsCallbackInterface.OnToggleOrbitMode;
                @ToggleOrbitMode.performed -= m_Wrapper.m_OrbitControlsActionsCallbackInterface.OnToggleOrbitMode;
                @ToggleOrbitMode.canceled -= m_Wrapper.m_OrbitControlsActionsCallbackInterface.OnToggleOrbitMode;
            }
            m_Wrapper.m_OrbitControlsActionsCallbackInterface = instance;
            if (instance != null)
            {
                @MouseDelta.started += instance.OnMouseDelta;
                @MouseDelta.performed += instance.OnMouseDelta;
                @MouseDelta.canceled += instance.OnMouseDelta;
                @EnableMovement.started += instance.OnEnableMovement;
                @EnableMovement.performed += instance.OnEnableMovement;
                @EnableMovement.canceled += instance.OnEnableMovement;
                @ToggleOrbitMode.started += instance.OnToggleOrbitMode;
                @ToggleOrbitMode.performed += instance.OnToggleOrbitMode;
                @ToggleOrbitMode.canceled += instance.OnToggleOrbitMode;
            }
        }
    }
    public OrbitControlsActions @OrbitControls => new OrbitControlsActions(this);
    public interface IOrbitControlsActions
    {
        void OnMouseDelta(InputAction.CallbackContext context);
        void OnEnableMovement(InputAction.CallbackContext context);
        void OnToggleOrbitMode(InputAction.CallbackContext context);
    }
}
